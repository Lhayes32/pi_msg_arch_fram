// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/test_proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ftest_5fproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ftest_5fproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ftest_5fproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ftest_5fproto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftest_5fproto_2eproto;
namespace test {
class AllTypes;
class AllTypesDefaultTypeInternal;
extern AllTypesDefaultTypeInternal _AllTypes_default_instance_;
class Nested;
class NestedDefaultTypeInternal;
extern NestedDefaultTypeInternal _Nested_default_instance_;
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::AllTypes* Arena::CreateMaybeMessage<::test::AllTypes>(Arena*);
template<> ::test::Nested* Arena::CreateMaybeMessage<::test::Nested>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {

enum TestEnum : int {
  UNKNOWN = 0,
  FIRST = 1,
  SECOND = 2,
  TestEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TestEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TestEnum_IsValid(int value);
constexpr TestEnum TestEnum_MIN = UNKNOWN;
constexpr TestEnum TestEnum_MAX = SECOND;
constexpr int TestEnum_ARRAYSIZE = TestEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnum_descriptor();
template<typename T>
inline const std::string& TestEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestEnum_descriptor(), enum_t_value);
}
inline bool TestEnum_Parse(
    const std::string& name, TestEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestEnum>(
    TestEnum_descriptor(), name, value);
}
// ===================================================================

class Nested PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.Nested) */ {
 public:
  inline Nested() : Nested(nullptr) {};
  virtual ~Nested();

  Nested(const Nested& from);
  Nested(Nested&& from) noexcept
    : Nested() {
    *this = ::std::move(from);
  }

  inline Nested& operator=(const Nested& from) {
    CopyFrom(from);
    return *this;
  }
  inline Nested& operator=(Nested&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Nested& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Nested* internal_default_instance() {
    return reinterpret_cast<const Nested*>(
               &_Nested_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Nested& a, Nested& b) {
    a.Swap(&b);
  }
  inline void Swap(Nested* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Nested* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Nested* New() const final {
    return CreateMaybeMessage<Nested>(nullptr);
  }

  Nested* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Nested>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Nested& from);
  void MergeFrom(const Nested& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nested* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.Nested";
  }
  protected:
  explicit Nested(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftest_5fproto_2eproto);
    return ::descriptor_table_proto_2ftest_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNestedStrFieldNumber = 2,
    kNestedIntFieldNumber = 1,
  };
  // string nested_str = 2;
  void clear_nested_str();
  const std::string& nested_str() const;
  void set_nested_str(const std::string& value);
  void set_nested_str(std::string&& value);
  void set_nested_str(const char* value);
  void set_nested_str(const char* value, size_t size);
  std::string* mutable_nested_str();
  std::string* release_nested_str();
  void set_allocated_nested_str(std::string* nested_str);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nested_str();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nested_str(
      std::string* nested_str);
  private:
  const std::string& _internal_nested_str() const;
  void _internal_set_nested_str(const std::string& value);
  std::string* _internal_mutable_nested_str();
  public:

  // int32 nested_int = 1;
  void clear_nested_int();
  ::PROTOBUF_NAMESPACE_ID::int32 nested_int() const;
  void set_nested_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nested_int() const;
  void _internal_set_nested_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:test.Nested)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nested_str_;
  ::PROTOBUF_NAMESPACE_ID::int32 nested_int_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftest_5fproto_2eproto;
};
// -------------------------------------------------------------------

class AllTypes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.AllTypes) */ {
 public:
  inline AllTypes() : AllTypes(nullptr) {};
  virtual ~AllTypes();

  AllTypes(const AllTypes& from);
  AllTypes(AllTypes&& from) noexcept
    : AllTypes() {
    *this = ::std::move(from);
  }

  inline AllTypes& operator=(const AllTypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllTypes& operator=(AllTypes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllTypes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllTypes* internal_default_instance() {
    return reinterpret_cast<const AllTypes*>(
               &_AllTypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AllTypes& a, AllTypes& b) {
    a.Swap(&b);
  }
  inline void Swap(AllTypes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllTypes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllTypes* New() const final {
    return CreateMaybeMessage<AllTypes>(nullptr);
  }

  AllTypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllTypes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllTypes& from);
  void MergeFrom(const AllTypes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllTypes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.AllTypes";
  }
  protected:
  explicit AllTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftest_5fproto_2eproto);
    return ::descriptor_table_proto_2ftest_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyRepeatedInt32FieldNumber = 18,
    kMyRepeatedStringFieldNumber = 19,
    kMyRepeatedNestedFieldNumber = 20,
    kMyRepeatedEnumFieldNumber = 21,
    kMyStringFieldNumber = 14,
    kMyBytesFieldNumber = 15,
    kMyNestedFieldNumber = 17,
    kMyDoubleFieldNumber = 1,
    kMyFloatFieldNumber = 2,
    kMyInt32FieldNumber = 3,
    kMyInt64FieldNumber = 4,
    kMyUint64FieldNumber = 6,
    kMyUint32FieldNumber = 5,
    kMySint32FieldNumber = 7,
    kMySint64FieldNumber = 8,
    kMyFixed64FieldNumber = 10,
    kMyFixed32FieldNumber = 9,
    kMySfixed32FieldNumber = 11,
    kMySfixed64FieldNumber = 12,
    kMyBoolFieldNumber = 13,
    kMyEnumFieldNumber = 16,
  };
  // repeated int32 my_repeated_int32 = 18;
  int my_repeated_int32_size() const;
  private:
  int _internal_my_repeated_int32_size() const;
  public:
  void clear_my_repeated_int32();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_my_repeated_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_my_repeated_int32() const;
  void _internal_add_my_repeated_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_my_repeated_int32();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 my_repeated_int32(int index) const;
  void set_my_repeated_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_my_repeated_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      my_repeated_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_my_repeated_int32();

  // repeated string my_repeated_string = 19;
  int my_repeated_string_size() const;
  private:
  int _internal_my_repeated_string_size() const;
  public:
  void clear_my_repeated_string();
  const std::string& my_repeated_string(int index) const;
  std::string* mutable_my_repeated_string(int index);
  void set_my_repeated_string(int index, const std::string& value);
  void set_my_repeated_string(int index, std::string&& value);
  void set_my_repeated_string(int index, const char* value);
  void set_my_repeated_string(int index, const char* value, size_t size);
  std::string* add_my_repeated_string();
  void add_my_repeated_string(const std::string& value);
  void add_my_repeated_string(std::string&& value);
  void add_my_repeated_string(const char* value);
  void add_my_repeated_string(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& my_repeated_string() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_my_repeated_string();
  private:
  const std::string& _internal_my_repeated_string(int index) const;
  std::string* _internal_add_my_repeated_string();
  public:

  // repeated .test.Nested my_repeated_nested = 20;
  int my_repeated_nested_size() const;
  private:
  int _internal_my_repeated_nested_size() const;
  public:
  void clear_my_repeated_nested();
  ::test::Nested* mutable_my_repeated_nested(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::Nested >*
      mutable_my_repeated_nested();
  private:
  const ::test::Nested& _internal_my_repeated_nested(int index) const;
  ::test::Nested* _internal_add_my_repeated_nested();
  public:
  const ::test::Nested& my_repeated_nested(int index) const;
  ::test::Nested* add_my_repeated_nested();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::Nested >&
      my_repeated_nested() const;

  // repeated .test.TestEnum my_repeated_enum = 21;
  int my_repeated_enum_size() const;
  private:
  int _internal_my_repeated_enum_size() const;
  public:
  void clear_my_repeated_enum();
  private:
  ::test::TestEnum _internal_my_repeated_enum(int index) const;
  void _internal_add_my_repeated_enum(::test::TestEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_my_repeated_enum();
  public:
  ::test::TestEnum my_repeated_enum(int index) const;
  void set_my_repeated_enum(int index, ::test::TestEnum value);
  void add_my_repeated_enum(::test::TestEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& my_repeated_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_my_repeated_enum();

  // string my_string = 14;
  void clear_my_string();
  const std::string& my_string() const;
  void set_my_string(const std::string& value);
  void set_my_string(std::string&& value);
  void set_my_string(const char* value);
  void set_my_string(const char* value, size_t size);
  std::string* mutable_my_string();
  std::string* release_my_string();
  void set_allocated_my_string(std::string* my_string);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_my_string();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_my_string(
      std::string* my_string);
  private:
  const std::string& _internal_my_string() const;
  void _internal_set_my_string(const std::string& value);
  std::string* _internal_mutable_my_string();
  public:

  // bytes my_bytes = 15;
  void clear_my_bytes();
  const std::string& my_bytes() const;
  void set_my_bytes(const std::string& value);
  void set_my_bytes(std::string&& value);
  void set_my_bytes(const char* value);
  void set_my_bytes(const void* value, size_t size);
  std::string* mutable_my_bytes();
  std::string* release_my_bytes();
  void set_allocated_my_bytes(std::string* my_bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_my_bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_my_bytes(
      std::string* my_bytes);
  private:
  const std::string& _internal_my_bytes() const;
  void _internal_set_my_bytes(const std::string& value);
  std::string* _internal_mutable_my_bytes();
  public:

  // .test.Nested my_nested = 17;
  bool has_my_nested() const;
  private:
  bool _internal_has_my_nested() const;
  public:
  void clear_my_nested();
  const ::test::Nested& my_nested() const;
  ::test::Nested* release_my_nested();
  ::test::Nested* mutable_my_nested();
  void set_allocated_my_nested(::test::Nested* my_nested);
  private:
  const ::test::Nested& _internal_my_nested() const;
  ::test::Nested* _internal_mutable_my_nested();
  public:
  void unsafe_arena_set_allocated_my_nested(
      ::test::Nested* my_nested);
  ::test::Nested* unsafe_arena_release_my_nested();

  // double my_double = 1;
  void clear_my_double();
  double my_double() const;
  void set_my_double(double value);
  private:
  double _internal_my_double() const;
  void _internal_set_my_double(double value);
  public:

  // float my_float = 2;
  void clear_my_float();
  float my_float() const;
  void set_my_float(float value);
  private:
  float _internal_my_float() const;
  void _internal_set_my_float(float value);
  public:

  // int32 my_int32 = 3;
  void clear_my_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 my_int32() const;
  void set_my_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_my_int32() const;
  void _internal_set_my_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 my_int64 = 4;
  void clear_my_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 my_int64() const;
  void set_my_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_my_int64() const;
  void _internal_set_my_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 my_uint64 = 6;
  void clear_my_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 my_uint64() const;
  void set_my_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_my_uint64() const;
  void _internal_set_my_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 my_uint32 = 5;
  void clear_my_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 my_uint32() const;
  void set_my_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_my_uint32() const;
  void _internal_set_my_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 my_sint32 = 7;
  void clear_my_sint32();
  ::PROTOBUF_NAMESPACE_ID::int32 my_sint32() const;
  void set_my_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_my_sint32() const;
  void _internal_set_my_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint64 my_sint64 = 8;
  void clear_my_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 my_sint64() const;
  void set_my_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_my_sint64() const;
  void _internal_set_my_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // fixed64 my_fixed64 = 10;
  void clear_my_fixed64();
  ::PROTOBUF_NAMESPACE_ID::uint64 my_fixed64() const;
  void set_my_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_my_fixed64() const;
  void _internal_set_my_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed32 my_fixed32 = 9;
  void clear_my_fixed32();
  ::PROTOBUF_NAMESPACE_ID::uint32 my_fixed32() const;
  void set_my_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_my_fixed32() const;
  void _internal_set_my_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sfixed32 my_sfixed32 = 11;
  void clear_my_sfixed32();
  ::PROTOBUF_NAMESPACE_ID::int32 my_sfixed32() const;
  void set_my_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_my_sfixed32() const;
  void _internal_set_my_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sfixed64 my_sfixed64 = 12;
  void clear_my_sfixed64();
  ::PROTOBUF_NAMESPACE_ID::int64 my_sfixed64() const;
  void set_my_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_my_sfixed64() const;
  void _internal_set_my_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool my_bool = 13;
  void clear_my_bool();
  bool my_bool() const;
  void set_my_bool(bool value);
  private:
  bool _internal_my_bool() const;
  void _internal_set_my_bool(bool value);
  public:

  // .test.TestEnum my_enum = 16;
  void clear_my_enum();
  ::test::TestEnum my_enum() const;
  void set_my_enum(::test::TestEnum value);
  private:
  ::test::TestEnum _internal_my_enum() const;
  void _internal_set_my_enum(::test::TestEnum value);
  public:

  // @@protoc_insertion_point(class_scope:test.AllTypes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > my_repeated_int32_;
  mutable std::atomic<int> _my_repeated_int32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> my_repeated_string_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::Nested > my_repeated_nested_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> my_repeated_enum_;
  mutable std::atomic<int> _my_repeated_enum_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr my_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr my_bytes_;
  ::test::Nested* my_nested_;
  double my_double_;
  float my_float_;
  ::PROTOBUF_NAMESPACE_ID::int32 my_int32_;
  ::PROTOBUF_NAMESPACE_ID::int64 my_int64_;
  ::PROTOBUF_NAMESPACE_ID::uint64 my_uint64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 my_uint32_;
  ::PROTOBUF_NAMESPACE_ID::int32 my_sint32_;
  ::PROTOBUF_NAMESPACE_ID::int64 my_sint64_;
  ::PROTOBUF_NAMESPACE_ID::uint64 my_fixed64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 my_fixed32_;
  ::PROTOBUF_NAMESPACE_ID::int32 my_sfixed32_;
  ::PROTOBUF_NAMESPACE_ID::int64 my_sfixed64_;
  bool my_bool_;
  int my_enum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftest_5fproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Nested

// int32 nested_int = 1;
inline void Nested::clear_nested_int() {
  nested_int_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Nested::_internal_nested_int() const {
  return nested_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Nested::nested_int() const {
  // @@protoc_insertion_point(field_get:test.Nested.nested_int)
  return _internal_nested_int();
}
inline void Nested::_internal_set_nested_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nested_int_ = value;
}
inline void Nested::set_nested_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nested_int(value);
  // @@protoc_insertion_point(field_set:test.Nested.nested_int)
}

// string nested_str = 2;
inline void Nested::clear_nested_str() {
  nested_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Nested::nested_str() const {
  // @@protoc_insertion_point(field_get:test.Nested.nested_str)
  return _internal_nested_str();
}
inline void Nested::set_nested_str(const std::string& value) {
  _internal_set_nested_str(value);
  // @@protoc_insertion_point(field_set:test.Nested.nested_str)
}
inline std::string* Nested::mutable_nested_str() {
  // @@protoc_insertion_point(field_mutable:test.Nested.nested_str)
  return _internal_mutable_nested_str();
}
inline const std::string& Nested::_internal_nested_str() const {
  return nested_str_.Get();
}
inline void Nested::_internal_set_nested_str(const std::string& value) {
  
  nested_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Nested::set_nested_str(std::string&& value) {
  
  nested_str_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:test.Nested.nested_str)
}
inline void Nested::set_nested_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nested_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:test.Nested.nested_str)
}
inline void Nested::set_nested_str(const char* value,
    size_t size) {
  
  nested_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:test.Nested.nested_str)
}
inline std::string* Nested::_internal_mutable_nested_str() {
  
  return nested_str_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Nested::release_nested_str() {
  // @@protoc_insertion_point(field_release:test.Nested.nested_str)
  return nested_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Nested::set_allocated_nested_str(std::string* nested_str) {
  if (nested_str != nullptr) {
    
  } else {
    
  }
  nested_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nested_str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:test.Nested.nested_str)
}
inline std::string* Nested::unsafe_arena_release_nested_str() {
  // @@protoc_insertion_point(field_unsafe_arena_release:test.Nested.nested_str)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nested_str_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Nested::unsafe_arena_set_allocated_nested_str(
    std::string* nested_str) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nested_str != nullptr) {
    
  } else {
    
  }
  nested_str_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nested_str, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.Nested.nested_str)
}

// -------------------------------------------------------------------

// AllTypes

// double my_double = 1;
inline void AllTypes::clear_my_double() {
  my_double_ = 0;
}
inline double AllTypes::_internal_my_double() const {
  return my_double_;
}
inline double AllTypes::my_double() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_double)
  return _internal_my_double();
}
inline void AllTypes::_internal_set_my_double(double value) {
  
  my_double_ = value;
}
inline void AllTypes::set_my_double(double value) {
  _internal_set_my_double(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_double)
}

// float my_float = 2;
inline void AllTypes::clear_my_float() {
  my_float_ = 0;
}
inline float AllTypes::_internal_my_float() const {
  return my_float_;
}
inline float AllTypes::my_float() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_float)
  return _internal_my_float();
}
inline void AllTypes::_internal_set_my_float(float value) {
  
  my_float_ = value;
}
inline void AllTypes::set_my_float(float value) {
  _internal_set_my_float(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_float)
}

// int32 my_int32 = 3;
inline void AllTypes::clear_my_int32() {
  my_int32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllTypes::_internal_my_int32() const {
  return my_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllTypes::my_int32() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_int32)
  return _internal_my_int32();
}
inline void AllTypes::_internal_set_my_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  my_int32_ = value;
}
inline void AllTypes::set_my_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_my_int32(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_int32)
}

// int64 my_int64 = 4;
inline void AllTypes::clear_my_int64() {
  my_int64_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AllTypes::_internal_my_int64() const {
  return my_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AllTypes::my_int64() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_int64)
  return _internal_my_int64();
}
inline void AllTypes::_internal_set_my_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  my_int64_ = value;
}
inline void AllTypes::set_my_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_my_int64(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_int64)
}

// uint32 my_uint32 = 5;
inline void AllTypes::clear_my_uint32() {
  my_uint32_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AllTypes::_internal_my_uint32() const {
  return my_uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AllTypes::my_uint32() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_uint32)
  return _internal_my_uint32();
}
inline void AllTypes::_internal_set_my_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  my_uint32_ = value;
}
inline void AllTypes::set_my_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_my_uint32(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_uint32)
}

// uint64 my_uint64 = 6;
inline void AllTypes::clear_my_uint64() {
  my_uint64_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AllTypes::_internal_my_uint64() const {
  return my_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AllTypes::my_uint64() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_uint64)
  return _internal_my_uint64();
}
inline void AllTypes::_internal_set_my_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  my_uint64_ = value;
}
inline void AllTypes::set_my_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_my_uint64(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_uint64)
}

// sint32 my_sint32 = 7;
inline void AllTypes::clear_my_sint32() {
  my_sint32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllTypes::_internal_my_sint32() const {
  return my_sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllTypes::my_sint32() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_sint32)
  return _internal_my_sint32();
}
inline void AllTypes::_internal_set_my_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  my_sint32_ = value;
}
inline void AllTypes::set_my_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_my_sint32(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_sint32)
}

// sint64 my_sint64 = 8;
inline void AllTypes::clear_my_sint64() {
  my_sint64_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AllTypes::_internal_my_sint64() const {
  return my_sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AllTypes::my_sint64() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_sint64)
  return _internal_my_sint64();
}
inline void AllTypes::_internal_set_my_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  my_sint64_ = value;
}
inline void AllTypes::set_my_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_my_sint64(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_sint64)
}

// fixed32 my_fixed32 = 9;
inline void AllTypes::clear_my_fixed32() {
  my_fixed32_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AllTypes::_internal_my_fixed32() const {
  return my_fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AllTypes::my_fixed32() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_fixed32)
  return _internal_my_fixed32();
}
inline void AllTypes::_internal_set_my_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  my_fixed32_ = value;
}
inline void AllTypes::set_my_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_my_fixed32(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_fixed32)
}

// fixed64 my_fixed64 = 10;
inline void AllTypes::clear_my_fixed64() {
  my_fixed64_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AllTypes::_internal_my_fixed64() const {
  return my_fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AllTypes::my_fixed64() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_fixed64)
  return _internal_my_fixed64();
}
inline void AllTypes::_internal_set_my_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  my_fixed64_ = value;
}
inline void AllTypes::set_my_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_my_fixed64(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_fixed64)
}

// sfixed32 my_sfixed32 = 11;
inline void AllTypes::clear_my_sfixed32() {
  my_sfixed32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllTypes::_internal_my_sfixed32() const {
  return my_sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllTypes::my_sfixed32() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_sfixed32)
  return _internal_my_sfixed32();
}
inline void AllTypes::_internal_set_my_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  my_sfixed32_ = value;
}
inline void AllTypes::set_my_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_my_sfixed32(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_sfixed32)
}

// sfixed64 my_sfixed64 = 12;
inline void AllTypes::clear_my_sfixed64() {
  my_sfixed64_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AllTypes::_internal_my_sfixed64() const {
  return my_sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AllTypes::my_sfixed64() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_sfixed64)
  return _internal_my_sfixed64();
}
inline void AllTypes::_internal_set_my_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  my_sfixed64_ = value;
}
inline void AllTypes::set_my_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_my_sfixed64(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_sfixed64)
}

// bool my_bool = 13;
inline void AllTypes::clear_my_bool() {
  my_bool_ = false;
}
inline bool AllTypes::_internal_my_bool() const {
  return my_bool_;
}
inline bool AllTypes::my_bool() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_bool)
  return _internal_my_bool();
}
inline void AllTypes::_internal_set_my_bool(bool value) {
  
  my_bool_ = value;
}
inline void AllTypes::set_my_bool(bool value) {
  _internal_set_my_bool(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_bool)
}

// string my_string = 14;
inline void AllTypes::clear_my_string() {
  my_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AllTypes::my_string() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_string)
  return _internal_my_string();
}
inline void AllTypes::set_my_string(const std::string& value) {
  _internal_set_my_string(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_string)
}
inline std::string* AllTypes::mutable_my_string() {
  // @@protoc_insertion_point(field_mutable:test.AllTypes.my_string)
  return _internal_mutable_my_string();
}
inline const std::string& AllTypes::_internal_my_string() const {
  return my_string_.Get();
}
inline void AllTypes::_internal_set_my_string(const std::string& value) {
  
  my_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AllTypes::set_my_string(std::string&& value) {
  
  my_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:test.AllTypes.my_string)
}
inline void AllTypes::set_my_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  my_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:test.AllTypes.my_string)
}
inline void AllTypes::set_my_string(const char* value,
    size_t size) {
  
  my_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:test.AllTypes.my_string)
}
inline std::string* AllTypes::_internal_mutable_my_string() {
  
  return my_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AllTypes::release_my_string() {
  // @@protoc_insertion_point(field_release:test.AllTypes.my_string)
  return my_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AllTypes::set_allocated_my_string(std::string* my_string) {
  if (my_string != nullptr) {
    
  } else {
    
  }
  my_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), my_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:test.AllTypes.my_string)
}
inline std::string* AllTypes::unsafe_arena_release_my_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:test.AllTypes.my_string)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return my_string_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AllTypes::unsafe_arena_set_allocated_my_string(
    std::string* my_string) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (my_string != nullptr) {
    
  } else {
    
  }
  my_string_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      my_string, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.AllTypes.my_string)
}

// bytes my_bytes = 15;
inline void AllTypes::clear_my_bytes() {
  my_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AllTypes::my_bytes() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_bytes)
  return _internal_my_bytes();
}
inline void AllTypes::set_my_bytes(const std::string& value) {
  _internal_set_my_bytes(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_bytes)
}
inline std::string* AllTypes::mutable_my_bytes() {
  // @@protoc_insertion_point(field_mutable:test.AllTypes.my_bytes)
  return _internal_mutable_my_bytes();
}
inline const std::string& AllTypes::_internal_my_bytes() const {
  return my_bytes_.Get();
}
inline void AllTypes::_internal_set_my_bytes(const std::string& value) {
  
  my_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AllTypes::set_my_bytes(std::string&& value) {
  
  my_bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:test.AllTypes.my_bytes)
}
inline void AllTypes::set_my_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  my_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:test.AllTypes.my_bytes)
}
inline void AllTypes::set_my_bytes(const void* value,
    size_t size) {
  
  my_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:test.AllTypes.my_bytes)
}
inline std::string* AllTypes::_internal_mutable_my_bytes() {
  
  return my_bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AllTypes::release_my_bytes() {
  // @@protoc_insertion_point(field_release:test.AllTypes.my_bytes)
  return my_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AllTypes::set_allocated_my_bytes(std::string* my_bytes) {
  if (my_bytes != nullptr) {
    
  } else {
    
  }
  my_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), my_bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:test.AllTypes.my_bytes)
}
inline std::string* AllTypes::unsafe_arena_release_my_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:test.AllTypes.my_bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return my_bytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AllTypes::unsafe_arena_set_allocated_my_bytes(
    std::string* my_bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (my_bytes != nullptr) {
    
  } else {
    
  }
  my_bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      my_bytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.AllTypes.my_bytes)
}

// .test.TestEnum my_enum = 16;
inline void AllTypes::clear_my_enum() {
  my_enum_ = 0;
}
inline ::test::TestEnum AllTypes::_internal_my_enum() const {
  return static_cast< ::test::TestEnum >(my_enum_);
}
inline ::test::TestEnum AllTypes::my_enum() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_enum)
  return _internal_my_enum();
}
inline void AllTypes::_internal_set_my_enum(::test::TestEnum value) {
  
  my_enum_ = value;
}
inline void AllTypes::set_my_enum(::test::TestEnum value) {
  _internal_set_my_enum(value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_enum)
}

// .test.Nested my_nested = 17;
inline bool AllTypes::_internal_has_my_nested() const {
  return this != internal_default_instance() && my_nested_ != nullptr;
}
inline bool AllTypes::has_my_nested() const {
  return _internal_has_my_nested();
}
inline void AllTypes::clear_my_nested() {
  if (GetArena() == nullptr && my_nested_ != nullptr) {
    delete my_nested_;
  }
  my_nested_ = nullptr;
}
inline const ::test::Nested& AllTypes::_internal_my_nested() const {
  const ::test::Nested* p = my_nested_;
  return p != nullptr ? *p : *reinterpret_cast<const ::test::Nested*>(
      &::test::_Nested_default_instance_);
}
inline const ::test::Nested& AllTypes::my_nested() const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_nested)
  return _internal_my_nested();
}
inline void AllTypes::unsafe_arena_set_allocated_my_nested(
    ::test::Nested* my_nested) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(my_nested_);
  }
  my_nested_ = my_nested;
  if (my_nested) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.AllTypes.my_nested)
}
inline ::test::Nested* AllTypes::release_my_nested() {
  auto temp = unsafe_arena_release_my_nested();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::test::Nested* AllTypes::unsafe_arena_release_my_nested() {
  // @@protoc_insertion_point(field_release:test.AllTypes.my_nested)
  
  ::test::Nested* temp = my_nested_;
  my_nested_ = nullptr;
  return temp;
}
inline ::test::Nested* AllTypes::_internal_mutable_my_nested() {
  
  if (my_nested_ == nullptr) {
    auto* p = CreateMaybeMessage<::test::Nested>(GetArena());
    my_nested_ = p;
  }
  return my_nested_;
}
inline ::test::Nested* AllTypes::mutable_my_nested() {
  // @@protoc_insertion_point(field_mutable:test.AllTypes.my_nested)
  return _internal_mutable_my_nested();
}
inline void AllTypes::set_allocated_my_nested(::test::Nested* my_nested) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete my_nested_;
  }
  if (my_nested) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(my_nested);
    if (message_arena != submessage_arena) {
      my_nested = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_nested, submessage_arena);
    }
    
  } else {
    
  }
  my_nested_ = my_nested;
  // @@protoc_insertion_point(field_set_allocated:test.AllTypes.my_nested)
}

// repeated int32 my_repeated_int32 = 18;
inline int AllTypes::_internal_my_repeated_int32_size() const {
  return my_repeated_int32_.size();
}
inline int AllTypes::my_repeated_int32_size() const {
  return _internal_my_repeated_int32_size();
}
inline void AllTypes::clear_my_repeated_int32() {
  my_repeated_int32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllTypes::_internal_my_repeated_int32(int index) const {
  return my_repeated_int32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllTypes::my_repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_repeated_int32)
  return _internal_my_repeated_int32(index);
}
inline void AllTypes::set_my_repeated_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  my_repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_repeated_int32)
}
inline void AllTypes::_internal_add_my_repeated_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  my_repeated_int32_.Add(value);
}
inline void AllTypes::add_my_repeated_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_my_repeated_int32(value);
  // @@protoc_insertion_point(field_add:test.AllTypes.my_repeated_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AllTypes::_internal_my_repeated_int32() const {
  return my_repeated_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AllTypes::my_repeated_int32() const {
  // @@protoc_insertion_point(field_list:test.AllTypes.my_repeated_int32)
  return _internal_my_repeated_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AllTypes::_internal_mutable_my_repeated_int32() {
  return &my_repeated_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AllTypes::mutable_my_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:test.AllTypes.my_repeated_int32)
  return _internal_mutable_my_repeated_int32();
}

// repeated string my_repeated_string = 19;
inline int AllTypes::_internal_my_repeated_string_size() const {
  return my_repeated_string_.size();
}
inline int AllTypes::my_repeated_string_size() const {
  return _internal_my_repeated_string_size();
}
inline void AllTypes::clear_my_repeated_string() {
  my_repeated_string_.Clear();
}
inline std::string* AllTypes::add_my_repeated_string() {
  // @@protoc_insertion_point(field_add_mutable:test.AllTypes.my_repeated_string)
  return _internal_add_my_repeated_string();
}
inline const std::string& AllTypes::_internal_my_repeated_string(int index) const {
  return my_repeated_string_.Get(index);
}
inline const std::string& AllTypes::my_repeated_string(int index) const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_repeated_string)
  return _internal_my_repeated_string(index);
}
inline std::string* AllTypes::mutable_my_repeated_string(int index) {
  // @@protoc_insertion_point(field_mutable:test.AllTypes.my_repeated_string)
  return my_repeated_string_.Mutable(index);
}
inline void AllTypes::set_my_repeated_string(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:test.AllTypes.my_repeated_string)
  my_repeated_string_.Mutable(index)->assign(value);
}
inline void AllTypes::set_my_repeated_string(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:test.AllTypes.my_repeated_string)
  my_repeated_string_.Mutable(index)->assign(std::move(value));
}
inline void AllTypes::set_my_repeated_string(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  my_repeated_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test.AllTypes.my_repeated_string)
}
inline void AllTypes::set_my_repeated_string(int index, const char* value, size_t size) {
  my_repeated_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.AllTypes.my_repeated_string)
}
inline std::string* AllTypes::_internal_add_my_repeated_string() {
  return my_repeated_string_.Add();
}
inline void AllTypes::add_my_repeated_string(const std::string& value) {
  my_repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test.AllTypes.my_repeated_string)
}
inline void AllTypes::add_my_repeated_string(std::string&& value) {
  my_repeated_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test.AllTypes.my_repeated_string)
}
inline void AllTypes::add_my_repeated_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  my_repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test.AllTypes.my_repeated_string)
}
inline void AllTypes::add_my_repeated_string(const char* value, size_t size) {
  my_repeated_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test.AllTypes.my_repeated_string)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AllTypes::my_repeated_string() const {
  // @@protoc_insertion_point(field_list:test.AllTypes.my_repeated_string)
  return my_repeated_string_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AllTypes::mutable_my_repeated_string() {
  // @@protoc_insertion_point(field_mutable_list:test.AllTypes.my_repeated_string)
  return &my_repeated_string_;
}

// repeated .test.Nested my_repeated_nested = 20;
inline int AllTypes::_internal_my_repeated_nested_size() const {
  return my_repeated_nested_.size();
}
inline int AllTypes::my_repeated_nested_size() const {
  return _internal_my_repeated_nested_size();
}
inline void AllTypes::clear_my_repeated_nested() {
  my_repeated_nested_.Clear();
}
inline ::test::Nested* AllTypes::mutable_my_repeated_nested(int index) {
  // @@protoc_insertion_point(field_mutable:test.AllTypes.my_repeated_nested)
  return my_repeated_nested_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::Nested >*
AllTypes::mutable_my_repeated_nested() {
  // @@protoc_insertion_point(field_mutable_list:test.AllTypes.my_repeated_nested)
  return &my_repeated_nested_;
}
inline const ::test::Nested& AllTypes::_internal_my_repeated_nested(int index) const {
  return my_repeated_nested_.Get(index);
}
inline const ::test::Nested& AllTypes::my_repeated_nested(int index) const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_repeated_nested)
  return _internal_my_repeated_nested(index);
}
inline ::test::Nested* AllTypes::_internal_add_my_repeated_nested() {
  return my_repeated_nested_.Add();
}
inline ::test::Nested* AllTypes::add_my_repeated_nested() {
  // @@protoc_insertion_point(field_add:test.AllTypes.my_repeated_nested)
  return _internal_add_my_repeated_nested();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::Nested >&
AllTypes::my_repeated_nested() const {
  // @@protoc_insertion_point(field_list:test.AllTypes.my_repeated_nested)
  return my_repeated_nested_;
}

// repeated .test.TestEnum my_repeated_enum = 21;
inline int AllTypes::_internal_my_repeated_enum_size() const {
  return my_repeated_enum_.size();
}
inline int AllTypes::my_repeated_enum_size() const {
  return _internal_my_repeated_enum_size();
}
inline void AllTypes::clear_my_repeated_enum() {
  my_repeated_enum_.Clear();
}
inline ::test::TestEnum AllTypes::_internal_my_repeated_enum(int index) const {
  return static_cast< ::test::TestEnum >(my_repeated_enum_.Get(index));
}
inline ::test::TestEnum AllTypes::my_repeated_enum(int index) const {
  // @@protoc_insertion_point(field_get:test.AllTypes.my_repeated_enum)
  return _internal_my_repeated_enum(index);
}
inline void AllTypes::set_my_repeated_enum(int index, ::test::TestEnum value) {
  my_repeated_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.AllTypes.my_repeated_enum)
}
inline void AllTypes::_internal_add_my_repeated_enum(::test::TestEnum value) {
  my_repeated_enum_.Add(value);
}
inline void AllTypes::add_my_repeated_enum(::test::TestEnum value) {
  // @@protoc_insertion_point(field_add:test.AllTypes.my_repeated_enum)
  _internal_add_my_repeated_enum(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AllTypes::my_repeated_enum() const {
  // @@protoc_insertion_point(field_list:test.AllTypes.my_repeated_enum)
  return my_repeated_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AllTypes::_internal_mutable_my_repeated_enum() {
  return &my_repeated_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AllTypes::mutable_my_repeated_enum() {
  // @@protoc_insertion_point(field_mutable_list:test.AllTypes.my_repeated_enum)
  return _internal_mutable_my_repeated_enum();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::test::TestEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::TestEnum>() {
  return ::test::TestEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ftest_5fproto_2eproto
