// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/test_proto.proto

#include "proto/test_proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftest_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Nested_proto_2ftest_5fproto_2eproto;
namespace test {
class NestedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Nested> _instance;
} _Nested_default_instance_;
class AllTypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllTypes> _instance;
} _AllTypes_default_instance_;
}  // namespace test
static void InitDefaultsscc_info_AllTypes_proto_2ftest_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::test::_AllTypes_default_instance_;
    new (ptr) ::test::AllTypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::test::AllTypes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllTypes_proto_2ftest_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllTypes_proto_2ftest_5fproto_2eproto}, {
      &scc_info_Nested_proto_2ftest_5fproto_2eproto.base,}};

static void InitDefaultsscc_info_Nested_proto_2ftest_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::test::_Nested_default_instance_;
    new (ptr) ::test::Nested();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::test::Nested::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Nested_proto_2ftest_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Nested_proto_2ftest_5fproto_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2ftest_5fproto_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2ftest_5fproto_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2ftest_5fproto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2ftest_5fproto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::Nested, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::Nested, nested_int_),
  PROTOBUF_FIELD_OFFSET(::test::Nested, nested_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_double_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_float_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_int32_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_int64_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_uint32_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_uint64_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_sint32_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_sint64_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_fixed32_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_fixed64_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_bool_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_string_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_bytes_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_enum_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_nested_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_repeated_string_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_repeated_nested_),
  PROTOBUF_FIELD_OFFSET(::test::AllTypes, my_repeated_enum_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::test::Nested)},
  { 7, -1, sizeof(::test::AllTypes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test::_Nested_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test::_AllTypes_default_instance_),
};

const char descriptor_table_protodef_proto_2ftest_5fproto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026proto/test_proto.proto\022\004test\"0\n\006Nested"
  "\022\022\n\nnested_int\030\001 \001(\005\022\022\n\nnested_str\030\002 \001(\t"
  "\"\364\003\n\010AllTypes\022\021\n\tmy_double\030\001 \001(\001\022\020\n\010my_f"
  "loat\030\002 \001(\002\022\020\n\010my_int32\030\003 \001(\005\022\020\n\010my_int64"
  "\030\004 \001(\003\022\021\n\tmy_uint32\030\005 \001(\r\022\021\n\tmy_uint64\030\006"
  " \001(\004\022\021\n\tmy_sint32\030\007 \001(\021\022\021\n\tmy_sint64\030\010 \001"
  "(\022\022\022\n\nmy_fixed32\030\t \001(\007\022\022\n\nmy_fixed64\030\n \001"
  "(\006\022\023\n\013my_sfixed32\030\013 \001(\017\022\023\n\013my_sfixed64\030\014"
  " \001(\020\022\017\n\007my_bool\030\r \001(\010\022\021\n\tmy_string\030\016 \001(\t"
  "\022\020\n\010my_bytes\030\017 \001(\014\022\037\n\007my_enum\030\020 \001(\0162\016.te"
  "st.TestEnum\022\037\n\tmy_nested\030\021 \001(\0132\014.test.Ne"
  "sted\022\031\n\021my_repeated_int32\030\022 \003(\005\022\032\n\022my_re"
  "peated_string\030\023 \003(\t\022(\n\022my_repeated_neste"
  "d\030\024 \003(\0132\014.test.Nested\022(\n\020my_repeated_enu"
  "m\030\025 \003(\0162\016.test.TestEnum*.\n\010TestEnum\022\013\n\007U"
  "NKNOWN\020\000\022\t\n\005FIRST\020\001\022\n\n\006SECOND\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2ftest_5fproto_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2ftest_5fproto_2eproto_sccs[2] = {
  &scc_info_AllTypes_proto_2ftest_5fproto_2eproto.base,
  &scc_info_Nested_proto_2ftest_5fproto_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2ftest_5fproto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftest_5fproto_2eproto = {
  false, false, descriptor_table_protodef_proto_2ftest_5fproto_2eproto, "proto/test_proto.proto", 639,
  &descriptor_table_proto_2ftest_5fproto_2eproto_once, descriptor_table_proto_2ftest_5fproto_2eproto_sccs, descriptor_table_proto_2ftest_5fproto_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_proto_2ftest_5fproto_2eproto::offsets,
  file_level_metadata_proto_2ftest_5fproto_2eproto, 2, file_level_enum_descriptors_proto_2ftest_5fproto_2eproto, file_level_service_descriptors_proto_2ftest_5fproto_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2ftest_5fproto_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2ftest_5fproto_2eproto)), true);
namespace test {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2ftest_5fproto_2eproto);
  return file_level_enum_descriptors_proto_2ftest_5fproto_2eproto[0];
}
bool TestEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Nested::InitAsDefaultInstance() {
}
class Nested::_Internal {
 public:
};

Nested::Nested(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:test.Nested)
}
Nested::Nested(const Nested& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nested_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nested_str().empty()) {
    nested_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nested_str(),
      GetArena());
  }
  nested_int_ = from.nested_int_;
  // @@protoc_insertion_point(copy_constructor:test.Nested)
}

void Nested::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Nested_proto_2ftest_5fproto_2eproto.base);
  nested_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nested_int_ = 0;
}

Nested::~Nested() {
  // @@protoc_insertion_point(destructor:test.Nested)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Nested::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nested_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Nested::ArenaDtor(void* object) {
  Nested* _this = reinterpret_cast< Nested* >(object);
  (void)_this;
}
void Nested::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Nested::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Nested& Nested::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Nested_proto_2ftest_5fproto_2eproto.base);
  return *internal_default_instance();
}


void Nested::Clear() {
// @@protoc_insertion_point(message_clear_start:test.Nested)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nested_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nested_int_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Nested::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 nested_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nested_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nested_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nested_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test.Nested.nested_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Nested::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.Nested)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nested_int = 1;
  if (this->nested_int() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nested_int(), target);
  }

  // string nested_str = 2;
  if (this->nested_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nested_str().data(), static_cast<int>(this->_internal_nested_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test.Nested.nested_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nested_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Nested)
  return target;
}

size_t Nested::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.Nested)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nested_str = 2;
  if (this->nested_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nested_str());
  }

  // int32 nested_int = 1;
  if (this->nested_int() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nested_int());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Nested::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.Nested)
  GOOGLE_DCHECK_NE(&from, this);
  const Nested* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Nested>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.Nested)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.Nested)
    MergeFrom(*source);
  }
}

void Nested::MergeFrom(const Nested& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.Nested)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nested_str().size() > 0) {
    _internal_set_nested_str(from._internal_nested_str());
  }
  if (from.nested_int() != 0) {
    _internal_set_nested_int(from._internal_nested_int());
  }
}

void Nested::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.Nested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nested::CopyFrom(const Nested& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.Nested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nested::IsInitialized() const {
  return true;
}

void Nested::InternalSwap(Nested* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nested_str_.Swap(&other->nested_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(nested_int_, other->nested_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Nested::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllTypes::InitAsDefaultInstance() {
  ::test::_AllTypes_default_instance_._instance.get_mutable()->my_nested_ = const_cast< ::test::Nested*>(
      ::test::Nested::internal_default_instance());
}
class AllTypes::_Internal {
 public:
  static const ::test::Nested& my_nested(const AllTypes* msg);
};

const ::test::Nested&
AllTypes::_Internal::my_nested(const AllTypes* msg) {
  return *msg->my_nested_;
}
AllTypes::AllTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  my_repeated_int32_(arena),
  my_repeated_string_(arena),
  my_repeated_nested_(arena),
  my_repeated_enum_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:test.AllTypes)
}
AllTypes::AllTypes(const AllTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      my_repeated_int32_(from.my_repeated_int32_),
      my_repeated_string_(from.my_repeated_string_),
      my_repeated_nested_(from.my_repeated_nested_),
      my_repeated_enum_(from.my_repeated_enum_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  my_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_my_string().empty()) {
    my_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_my_string(),
      GetArena());
  }
  my_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_my_bytes().empty()) {
    my_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_my_bytes(),
      GetArena());
  }
  if (from._internal_has_my_nested()) {
    my_nested_ = new ::test::Nested(*from.my_nested_);
  } else {
    my_nested_ = nullptr;
  }
  ::memcpy(&my_double_, &from.my_double_,
    static_cast<size_t>(reinterpret_cast<char*>(&my_enum_) -
    reinterpret_cast<char*>(&my_double_)) + sizeof(my_enum_));
  // @@protoc_insertion_point(copy_constructor:test.AllTypes)
}

void AllTypes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllTypes_proto_2ftest_5fproto_2eproto.base);
  my_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  my_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&my_nested_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&my_enum_) -
      reinterpret_cast<char*>(&my_nested_)) + sizeof(my_enum_));
}

AllTypes::~AllTypes() {
  // @@protoc_insertion_point(destructor:test.AllTypes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  my_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  my_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete my_nested_;
}

void AllTypes::ArenaDtor(void* object) {
  AllTypes* _this = reinterpret_cast< AllTypes* >(object);
  (void)_this;
}
void AllTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllTypes& AllTypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllTypes_proto_2ftest_5fproto_2eproto.base);
  return *internal_default_instance();
}


void AllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:test.AllTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  my_repeated_int32_.Clear();
  my_repeated_string_.Clear();
  my_repeated_nested_.Clear();
  my_repeated_enum_.Clear();
  my_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  my_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && my_nested_ != nullptr) {
    delete my_nested_;
  }
  my_nested_ = nullptr;
  ::memset(&my_double_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&my_enum_) -
      reinterpret_cast<char*>(&my_double_)) + sizeof(my_enum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double my_double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          my_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float my_float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          my_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 my_int32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          my_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 my_int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          my_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 my_uint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          my_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 my_uint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          my_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 my_sint32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          my_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 my_sint64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          my_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 my_fixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          my_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // fixed64 my_fixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          my_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed32 my_sfixed32 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          my_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // sfixed64 my_sfixed64 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          my_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // bool my_bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          my_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string my_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_my_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test.AllTypes.my_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes my_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_my_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .test.TestEnum my_enum = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_my_enum(static_cast<::test::TestEnum>(val));
        } else goto handle_unusual;
        continue;
      // .test.Nested my_nested = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_my_nested(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 my_repeated_int32 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_my_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144) {
          _internal_add_my_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string my_repeated_string = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_my_repeated_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test.AllTypes.my_repeated_string"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .test.Nested my_repeated_nested = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_my_repeated_nested(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .test.TestEnum my_repeated_enum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_my_repeated_enum(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_my_repeated_enum(static_cast<::test::TestEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.AllTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double my_double = 1;
  if (!(this->my_double() <= 0 && this->my_double() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_my_double(), target);
  }

  // float my_float = 2;
  if (!(this->my_float() <= 0 && this->my_float() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_my_float(), target);
  }

  // int32 my_int32 = 3;
  if (this->my_int32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_my_int32(), target);
  }

  // int64 my_int64 = 4;
  if (this->my_int64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_my_int64(), target);
  }

  // uint32 my_uint32 = 5;
  if (this->my_uint32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_my_uint32(), target);
  }

  // uint64 my_uint64 = 6;
  if (this->my_uint64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_my_uint64(), target);
  }

  // sint32 my_sint32 = 7;
  if (this->my_sint32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_my_sint32(), target);
  }

  // sint64 my_sint64 = 8;
  if (this->my_sint64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(8, this->_internal_my_sint64(), target);
  }

  // fixed32 my_fixed32 = 9;
  if (this->my_fixed32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_my_fixed32(), target);
  }

  // fixed64 my_fixed64 = 10;
  if (this->my_fixed64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_my_fixed64(), target);
  }

  // sfixed32 my_sfixed32 = 11;
  if (this->my_sfixed32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(11, this->_internal_my_sfixed32(), target);
  }

  // sfixed64 my_sfixed64 = 12;
  if (this->my_sfixed64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(12, this->_internal_my_sfixed64(), target);
  }

  // bool my_bool = 13;
  if (this->my_bool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_my_bool(), target);
  }

  // string my_string = 14;
  if (this->my_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_my_string().data(), static_cast<int>(this->_internal_my_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test.AllTypes.my_string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_my_string(), target);
  }

  // bytes my_bytes = 15;
  if (this->my_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_my_bytes(), target);
  }

  // .test.TestEnum my_enum = 16;
  if (this->my_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_my_enum(), target);
  }

  // .test.Nested my_nested = 17;
  if (this->has_my_nested()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::my_nested(this), target, stream);
  }

  // repeated int32 my_repeated_int32 = 18;
  {
    int byte_size = _my_repeated_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          18, _internal_my_repeated_int32(), byte_size, target);
    }
  }

  // repeated string my_repeated_string = 19;
  for (int i = 0, n = this->_internal_my_repeated_string_size(); i < n; i++) {
    const auto& s = this->_internal_my_repeated_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test.AllTypes.my_repeated_string");
    target = stream->WriteString(19, s, target);
  }

  // repeated .test.Nested my_repeated_nested = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_my_repeated_nested_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_my_repeated_nested(i), target, stream);
  }

  // repeated .test.TestEnum my_repeated_enum = 21;
  {
    int byte_size = _my_repeated_enum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          21, my_repeated_enum_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.AllTypes)
  return target;
}

size_t AllTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.AllTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 my_repeated_int32 = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->my_repeated_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _my_repeated_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string my_repeated_string = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(my_repeated_string_.size());
  for (int i = 0, n = my_repeated_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      my_repeated_string_.Get(i));
  }

  // repeated .test.Nested my_repeated_nested = 20;
  total_size += 2UL * this->_internal_my_repeated_nested_size();
  for (const auto& msg : this->my_repeated_nested_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .test.TestEnum my_repeated_enum = 21;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_my_repeated_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_my_repeated_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _my_repeated_enum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string my_string = 14;
  if (this->my_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_my_string());
  }

  // bytes my_bytes = 15;
  if (this->my_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_my_bytes());
  }

  // .test.Nested my_nested = 17;
  if (this->has_my_nested()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *my_nested_);
  }

  // double my_double = 1;
  if (!(this->my_double() <= 0 && this->my_double() >= 0)) {
    total_size += 1 + 8;
  }

  // float my_float = 2;
  if (!(this->my_float() <= 0 && this->my_float() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 my_int32 = 3;
  if (this->my_int32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_my_int32());
  }

  // int64 my_int64 = 4;
  if (this->my_int64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_my_int64());
  }

  // uint64 my_uint64 = 6;
  if (this->my_uint64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_my_uint64());
  }

  // uint32 my_uint32 = 5;
  if (this->my_uint32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_my_uint32());
  }

  // sint32 my_sint32 = 7;
  if (this->my_sint32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_my_sint32());
  }

  // sint64 my_sint64 = 8;
  if (this->my_sint64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_my_sint64());
  }

  // fixed64 my_fixed64 = 10;
  if (this->my_fixed64() != 0) {
    total_size += 1 + 8;
  }

  // fixed32 my_fixed32 = 9;
  if (this->my_fixed32() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 my_sfixed32 = 11;
  if (this->my_sfixed32() != 0) {
    total_size += 1 + 4;
  }

  // sfixed64 my_sfixed64 = 12;
  if (this->my_sfixed64() != 0) {
    total_size += 1 + 8;
  }

  // bool my_bool = 13;
  if (this->my_bool() != 0) {
    total_size += 1 + 1;
  }

  // .test.TestEnum my_enum = 16;
  if (this->my_enum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_my_enum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.AllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const AllTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.AllTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.AllTypes)
    MergeFrom(*source);
  }
}

void AllTypes::MergeFrom(const AllTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.AllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  my_repeated_int32_.MergeFrom(from.my_repeated_int32_);
  my_repeated_string_.MergeFrom(from.my_repeated_string_);
  my_repeated_nested_.MergeFrom(from.my_repeated_nested_);
  my_repeated_enum_.MergeFrom(from.my_repeated_enum_);
  if (from.my_string().size() > 0) {
    _internal_set_my_string(from._internal_my_string());
  }
  if (from.my_bytes().size() > 0) {
    _internal_set_my_bytes(from._internal_my_bytes());
  }
  if (from.has_my_nested()) {
    _internal_mutable_my_nested()->::test::Nested::MergeFrom(from._internal_my_nested());
  }
  if (!(from.my_double() <= 0 && from.my_double() >= 0)) {
    _internal_set_my_double(from._internal_my_double());
  }
  if (!(from.my_float() <= 0 && from.my_float() >= 0)) {
    _internal_set_my_float(from._internal_my_float());
  }
  if (from.my_int32() != 0) {
    _internal_set_my_int32(from._internal_my_int32());
  }
  if (from.my_int64() != 0) {
    _internal_set_my_int64(from._internal_my_int64());
  }
  if (from.my_uint64() != 0) {
    _internal_set_my_uint64(from._internal_my_uint64());
  }
  if (from.my_uint32() != 0) {
    _internal_set_my_uint32(from._internal_my_uint32());
  }
  if (from.my_sint32() != 0) {
    _internal_set_my_sint32(from._internal_my_sint32());
  }
  if (from.my_sint64() != 0) {
    _internal_set_my_sint64(from._internal_my_sint64());
  }
  if (from.my_fixed64() != 0) {
    _internal_set_my_fixed64(from._internal_my_fixed64());
  }
  if (from.my_fixed32() != 0) {
    _internal_set_my_fixed32(from._internal_my_fixed32());
  }
  if (from.my_sfixed32() != 0) {
    _internal_set_my_sfixed32(from._internal_my_sfixed32());
  }
  if (from.my_sfixed64() != 0) {
    _internal_set_my_sfixed64(from._internal_my_sfixed64());
  }
  if (from.my_bool() != 0) {
    _internal_set_my_bool(from._internal_my_bool());
  }
  if (from.my_enum() != 0) {
    _internal_set_my_enum(from._internal_my_enum());
  }
}

void AllTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.AllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTypes::CopyFrom(const AllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.AllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTypes::IsInitialized() const {
  return true;
}

void AllTypes::InternalSwap(AllTypes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  my_repeated_int32_.InternalSwap(&other->my_repeated_int32_);
  my_repeated_string_.InternalSwap(&other->my_repeated_string_);
  my_repeated_nested_.InternalSwap(&other->my_repeated_nested_);
  my_repeated_enum_.InternalSwap(&other->my_repeated_enum_);
  my_string_.Swap(&other->my_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  my_bytes_.Swap(&other->my_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllTypes, my_enum_)
      + sizeof(AllTypes::my_enum_)
      - PROTOBUF_FIELD_OFFSET(AllTypes, my_nested_)>(
          reinterpret_cast<char*>(&my_nested_),
          reinterpret_cast<char*>(&other->my_nested_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllTypes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::test::Nested* Arena::CreateMaybeMessage< ::test::Nested >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::Nested >(arena);
}
template<> PROTOBUF_NOINLINE ::test::AllTypes* Arena::CreateMaybeMessage< ::test::AllTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::AllTypes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
